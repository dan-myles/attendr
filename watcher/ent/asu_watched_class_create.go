// Code generated by ent, DO NOT EDIT.

package ent

import (
	"attendr/watcher/ent/asu_watched_class"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ASUWatchedClassCreate is the builder for creating a ASU_Watched_Class entity.
type ASUWatchedClassCreate struct {
	config
	mutation *ASUWatchedClassMutation
	hooks    []Hook
}

// SetAge sets the "age" field.
func (awcc *ASUWatchedClassCreate) SetAge(i int) *ASUWatchedClassCreate {
	awcc.mutation.SetAge(i)
	return awcc
}

// SetName sets the "name" field.
func (awcc *ASUWatchedClassCreate) SetName(s string) *ASUWatchedClassCreate {
	awcc.mutation.SetName(s)
	return awcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (awcc *ASUWatchedClassCreate) SetNillableName(s *string) *ASUWatchedClassCreate {
	if s != nil {
		awcc.SetName(*s)
	}
	return awcc
}

// Mutation returns the ASUWatchedClassMutation object of the builder.
func (awcc *ASUWatchedClassCreate) Mutation() *ASUWatchedClassMutation {
	return awcc.mutation
}

// Save creates the ASU_Watched_Class in the database.
func (awcc *ASUWatchedClassCreate) Save(ctx context.Context) (*ASU_Watched_Class, error) {
	awcc.defaults()
	return withHooks(ctx, awcc.sqlSave, awcc.mutation, awcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (awcc *ASUWatchedClassCreate) SaveX(ctx context.Context) *ASU_Watched_Class {
	v, err := awcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awcc *ASUWatchedClassCreate) Exec(ctx context.Context) error {
	_, err := awcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awcc *ASUWatchedClassCreate) ExecX(ctx context.Context) {
	if err := awcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (awcc *ASUWatchedClassCreate) defaults() {
	if _, ok := awcc.mutation.Name(); !ok {
		v := asu_watched_class.DefaultName
		awcc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (awcc *ASUWatchedClassCreate) check() error {
	if _, ok := awcc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "ASU_Watched_Class.age"`)}
	}
	if v, ok := awcc.mutation.Age(); ok {
		if err := asu_watched_class.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "ASU_Watched_Class.age": %w`, err)}
		}
	}
	if _, ok := awcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ASU_Watched_Class.name"`)}
	}
	return nil
}

func (awcc *ASUWatchedClassCreate) sqlSave(ctx context.Context) (*ASU_Watched_Class, error) {
	if err := awcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := awcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, awcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	awcc.mutation.id = &_node.ID
	awcc.mutation.done = true
	return _node, nil
}

func (awcc *ASUWatchedClassCreate) createSpec() (*ASU_Watched_Class, *sqlgraph.CreateSpec) {
	var (
		_node = &ASU_Watched_Class{config: awcc.config}
		_spec = sqlgraph.NewCreateSpec(asu_watched_class.Table, sqlgraph.NewFieldSpec(asu_watched_class.FieldID, field.TypeInt))
	)
	if value, ok := awcc.mutation.Age(); ok {
		_spec.SetField(asu_watched_class.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := awcc.mutation.Name(); ok {
		_spec.SetField(asu_watched_class.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// ASUWatchedClassCreateBulk is the builder for creating many ASU_Watched_Class entities in bulk.
type ASUWatchedClassCreateBulk struct {
	config
	builders []*ASUWatchedClassCreate
}

// Save creates the ASU_Watched_Class entities in the database.
func (awccb *ASUWatchedClassCreateBulk) Save(ctx context.Context) ([]*ASU_Watched_Class, error) {
	specs := make([]*sqlgraph.CreateSpec, len(awccb.builders))
	nodes := make([]*ASU_Watched_Class, len(awccb.builders))
	mutators := make([]Mutator, len(awccb.builders))
	for i := range awccb.builders {
		func(i int, root context.Context) {
			builder := awccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ASUWatchedClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, awccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, awccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, awccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (awccb *ASUWatchedClassCreateBulk) SaveX(ctx context.Context) []*ASU_Watched_Class {
	v, err := awccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awccb *ASUWatchedClassCreateBulk) Exec(ctx context.Context) error {
	_, err := awccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awccb *ASUWatchedClassCreateBulk) ExecX(ctx context.Context) {
	if err := awccb.Exec(ctx); err != nil {
		panic(err)
	}
}
