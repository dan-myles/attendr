// Code generated by ent, DO NOT EDIT.

package ent

import (
	"attendr/watcher/ent/asuwatchedclass"
	"attendr/watcher/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeASUWatchedClass = "ASUWatchedClass"
)

// ASUWatchedClassMutation represents an operation that mutates the ASUWatchedClass nodes in the graph.
type ASUWatchedClassMutation struct {
	config
	op             Op
	typ            string
	id             *int
	user_id        *string
	title          *string
	instructor     *string
	subject        *string
	subject_number *string
	tracked_at     *time.Time
	class_number   *string
	term           *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*ASUWatchedClass, error)
	predicates     []predicate.ASUWatchedClass
}

var _ ent.Mutation = (*ASUWatchedClassMutation)(nil)

// asuwatchedclassOption allows management of the mutation configuration using functional options.
type asuwatchedclassOption func(*ASUWatchedClassMutation)

// newASUWatchedClassMutation creates new mutation for the ASUWatchedClass entity.
func newASUWatchedClassMutation(c config, op Op, opts ...asuwatchedclassOption) *ASUWatchedClassMutation {
	m := &ASUWatchedClassMutation{
		config:        c,
		op:            op,
		typ:           TypeASUWatchedClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withASUWatchedClassID sets the ID field of the mutation.
func withASUWatchedClassID(id int) asuwatchedclassOption {
	return func(m *ASUWatchedClassMutation) {
		var (
			err   error
			once  sync.Once
			value *ASUWatchedClass
		)
		m.oldValue = func(ctx context.Context) (*ASUWatchedClass, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ASUWatchedClass.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withASUWatchedClass sets the old ASUWatchedClass of the mutation.
func withASUWatchedClass(node *ASUWatchedClass) asuwatchedclassOption {
	return func(m *ASUWatchedClassMutation) {
		m.oldValue = func(context.Context) (*ASUWatchedClass, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ASUWatchedClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ASUWatchedClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ASUWatchedClass entities.
func (m *ASUWatchedClassMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ASUWatchedClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ASUWatchedClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ASUWatchedClass.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ASUWatchedClassMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ASUWatchedClassMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ASUWatchedClassMutation) ResetUserID() {
	m.user_id = nil
}

// SetTitle sets the "title" field.
func (m *ASUWatchedClassMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ASUWatchedClassMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ASUWatchedClassMutation) ResetTitle() {
	m.title = nil
}

// SetInstructor sets the "instructor" field.
func (m *ASUWatchedClassMutation) SetInstructor(s string) {
	m.instructor = &s
}

// Instructor returns the value of the "instructor" field in the mutation.
func (m *ASUWatchedClassMutation) Instructor() (r string, exists bool) {
	v := m.instructor
	if v == nil {
		return
	}
	return *v, true
}

// OldInstructor returns the old "instructor" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldInstructor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstructor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstructor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstructor: %w", err)
	}
	return oldValue.Instructor, nil
}

// ResetInstructor resets all changes to the "instructor" field.
func (m *ASUWatchedClassMutation) ResetInstructor() {
	m.instructor = nil
}

// SetSubject sets the "subject" field.
func (m *ASUWatchedClassMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *ASUWatchedClassMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *ASUWatchedClassMutation) ResetSubject() {
	m.subject = nil
}

// SetSubjectNumber sets the "subject_number" field.
func (m *ASUWatchedClassMutation) SetSubjectNumber(s string) {
	m.subject_number = &s
}

// SubjectNumber returns the value of the "subject_number" field in the mutation.
func (m *ASUWatchedClassMutation) SubjectNumber() (r string, exists bool) {
	v := m.subject_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectNumber returns the old "subject_number" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldSubjectNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubjectNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubjectNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectNumber: %w", err)
	}
	return oldValue.SubjectNumber, nil
}

// ResetSubjectNumber resets all changes to the "subject_number" field.
func (m *ASUWatchedClassMutation) ResetSubjectNumber() {
	m.subject_number = nil
}

// SetTrackedAt sets the "tracked_at" field.
func (m *ASUWatchedClassMutation) SetTrackedAt(t time.Time) {
	m.tracked_at = &t
}

// TrackedAt returns the value of the "tracked_at" field in the mutation.
func (m *ASUWatchedClassMutation) TrackedAt() (r time.Time, exists bool) {
	v := m.tracked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackedAt returns the old "tracked_at" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldTrackedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrackedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrackedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackedAt: %w", err)
	}
	return oldValue.TrackedAt, nil
}

// ClearTrackedAt clears the value of the "tracked_at" field.
func (m *ASUWatchedClassMutation) ClearTrackedAt() {
	m.tracked_at = nil
	m.clearedFields[asuwatchedclass.FieldTrackedAt] = struct{}{}
}

// TrackedAtCleared returns if the "tracked_at" field was cleared in this mutation.
func (m *ASUWatchedClassMutation) TrackedAtCleared() bool {
	_, ok := m.clearedFields[asuwatchedclass.FieldTrackedAt]
	return ok
}

// ResetTrackedAt resets all changes to the "tracked_at" field.
func (m *ASUWatchedClassMutation) ResetTrackedAt() {
	m.tracked_at = nil
	delete(m.clearedFields, asuwatchedclass.FieldTrackedAt)
}

// SetClassNumber sets the "class_number" field.
func (m *ASUWatchedClassMutation) SetClassNumber(s string) {
	m.class_number = &s
}

// ClassNumber returns the value of the "class_number" field in the mutation.
func (m *ASUWatchedClassMutation) ClassNumber() (r string, exists bool) {
	v := m.class_number
	if v == nil {
		return
	}
	return *v, true
}

// OldClassNumber returns the old "class_number" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldClassNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClassNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClassNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassNumber: %w", err)
	}
	return oldValue.ClassNumber, nil
}

// ResetClassNumber resets all changes to the "class_number" field.
func (m *ASUWatchedClassMutation) ResetClassNumber() {
	m.class_number = nil
}

// SetTerm sets the "term" field.
func (m *ASUWatchedClassMutation) SetTerm(s string) {
	m.term = &s
}

// Term returns the value of the "term" field in the mutation.
func (m *ASUWatchedClassMutation) Term() (r string, exists bool) {
	v := m.term
	if v == nil {
		return
	}
	return *v, true
}

// OldTerm returns the old "term" field's value of the ASUWatchedClass entity.
// If the ASUWatchedClass object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ASUWatchedClassMutation) OldTerm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTerm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTerm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTerm: %w", err)
	}
	return oldValue.Term, nil
}

// ResetTerm resets all changes to the "term" field.
func (m *ASUWatchedClassMutation) ResetTerm() {
	m.term = nil
}

// Where appends a list predicates to the ASUWatchedClassMutation builder.
func (m *ASUWatchedClassMutation) Where(ps ...predicate.ASUWatchedClass) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ASUWatchedClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ASUWatchedClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ASUWatchedClass, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ASUWatchedClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ASUWatchedClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ASUWatchedClass).
func (m *ASUWatchedClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ASUWatchedClassMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, asuwatchedclass.FieldUserID)
	}
	if m.title != nil {
		fields = append(fields, asuwatchedclass.FieldTitle)
	}
	if m.instructor != nil {
		fields = append(fields, asuwatchedclass.FieldInstructor)
	}
	if m.subject != nil {
		fields = append(fields, asuwatchedclass.FieldSubject)
	}
	if m.subject_number != nil {
		fields = append(fields, asuwatchedclass.FieldSubjectNumber)
	}
	if m.tracked_at != nil {
		fields = append(fields, asuwatchedclass.FieldTrackedAt)
	}
	if m.class_number != nil {
		fields = append(fields, asuwatchedclass.FieldClassNumber)
	}
	if m.term != nil {
		fields = append(fields, asuwatchedclass.FieldTerm)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ASUWatchedClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case asuwatchedclass.FieldUserID:
		return m.UserID()
	case asuwatchedclass.FieldTitle:
		return m.Title()
	case asuwatchedclass.FieldInstructor:
		return m.Instructor()
	case asuwatchedclass.FieldSubject:
		return m.Subject()
	case asuwatchedclass.FieldSubjectNumber:
		return m.SubjectNumber()
	case asuwatchedclass.FieldTrackedAt:
		return m.TrackedAt()
	case asuwatchedclass.FieldClassNumber:
		return m.ClassNumber()
	case asuwatchedclass.FieldTerm:
		return m.Term()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ASUWatchedClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case asuwatchedclass.FieldUserID:
		return m.OldUserID(ctx)
	case asuwatchedclass.FieldTitle:
		return m.OldTitle(ctx)
	case asuwatchedclass.FieldInstructor:
		return m.OldInstructor(ctx)
	case asuwatchedclass.FieldSubject:
		return m.OldSubject(ctx)
	case asuwatchedclass.FieldSubjectNumber:
		return m.OldSubjectNumber(ctx)
	case asuwatchedclass.FieldTrackedAt:
		return m.OldTrackedAt(ctx)
	case asuwatchedclass.FieldClassNumber:
		return m.OldClassNumber(ctx)
	case asuwatchedclass.FieldTerm:
		return m.OldTerm(ctx)
	}
	return nil, fmt.Errorf("unknown ASUWatchedClass field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ASUWatchedClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case asuwatchedclass.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case asuwatchedclass.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case asuwatchedclass.FieldInstructor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstructor(v)
		return nil
	case asuwatchedclass.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case asuwatchedclass.FieldSubjectNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectNumber(v)
		return nil
	case asuwatchedclass.FieldTrackedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackedAt(v)
		return nil
	case asuwatchedclass.FieldClassNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassNumber(v)
		return nil
	case asuwatchedclass.FieldTerm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTerm(v)
		return nil
	}
	return fmt.Errorf("unknown ASUWatchedClass field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ASUWatchedClassMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ASUWatchedClassMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ASUWatchedClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ASUWatchedClass numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ASUWatchedClassMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(asuwatchedclass.FieldTrackedAt) {
		fields = append(fields, asuwatchedclass.FieldTrackedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ASUWatchedClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ASUWatchedClassMutation) ClearField(name string) error {
	switch name {
	case asuwatchedclass.FieldTrackedAt:
		m.ClearTrackedAt()
		return nil
	}
	return fmt.Errorf("unknown ASUWatchedClass nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ASUWatchedClassMutation) ResetField(name string) error {
	switch name {
	case asuwatchedclass.FieldUserID:
		m.ResetUserID()
		return nil
	case asuwatchedclass.FieldTitle:
		m.ResetTitle()
		return nil
	case asuwatchedclass.FieldInstructor:
		m.ResetInstructor()
		return nil
	case asuwatchedclass.FieldSubject:
		m.ResetSubject()
		return nil
	case asuwatchedclass.FieldSubjectNumber:
		m.ResetSubjectNumber()
		return nil
	case asuwatchedclass.FieldTrackedAt:
		m.ResetTrackedAt()
		return nil
	case asuwatchedclass.FieldClassNumber:
		m.ResetClassNumber()
		return nil
	case asuwatchedclass.FieldTerm:
		m.ResetTerm()
		return nil
	}
	return fmt.Errorf("unknown ASUWatchedClass field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ASUWatchedClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ASUWatchedClassMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ASUWatchedClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ASUWatchedClassMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ASUWatchedClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ASUWatchedClassMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ASUWatchedClassMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ASUWatchedClass unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ASUWatchedClassMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ASUWatchedClass edge %s", name)
}
