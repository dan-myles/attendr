// Code generated by ent, DO NOT EDIT.

package ent

import (
	"attendr/watcher/ent/asu_watched_class"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ASU_Watched_Class is the model entity for the ASU_Watched_Class schema.
type ASU_Watched_Class struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Instructor holds the value of the "instructor" field.
	Instructor string `json:"instructor,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// SubjectNumber holds the value of the "subject_number" field.
	SubjectNumber string `json:"subject_number,omitempty"`
	// HasOpenSeats holds the value of the "has_open_seats" field.
	HasOpenSeats bool `json:"has_open_seats,omitempty"`
	// TrackedAt holds the value of the "tracked_at" field.
	TrackedAt time.Time `json:"tracked_at,omitempty"`
	// ClassNumber holds the value of the "class_number" field.
	ClassNumber string `json:"class_number,omitempty"`
	// Term holds the value of the "term" field.
	Term         string `json:"term,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ASU_Watched_Class) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asu_watched_class.FieldHasOpenSeats:
			values[i] = new(sql.NullBool)
		case asu_watched_class.FieldID:
			values[i] = new(sql.NullInt64)
		case asu_watched_class.FieldTitle, asu_watched_class.FieldInstructor, asu_watched_class.FieldSubject, asu_watched_class.FieldSubjectNumber, asu_watched_class.FieldClassNumber, asu_watched_class.FieldTerm:
			values[i] = new(sql.NullString)
		case asu_watched_class.FieldTrackedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ASU_Watched_Class fields.
func (awc *ASU_Watched_Class) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asu_watched_class.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			awc.ID = int(value.Int64)
		case asu_watched_class.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				awc.Title = value.String
			}
		case asu_watched_class.FieldInstructor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instructor", values[i])
			} else if value.Valid {
				awc.Instructor = value.String
			}
		case asu_watched_class.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				awc.Subject = value.String
			}
		case asu_watched_class.FieldSubjectNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_number", values[i])
			} else if value.Valid {
				awc.SubjectNumber = value.String
			}
		case asu_watched_class.FieldHasOpenSeats:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_open_seats", values[i])
			} else if value.Valid {
				awc.HasOpenSeats = value.Bool
			}
		case asu_watched_class.FieldTrackedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tracked_at", values[i])
			} else if value.Valid {
				awc.TrackedAt = value.Time
			}
		case asu_watched_class.FieldClassNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_number", values[i])
			} else if value.Valid {
				awc.ClassNumber = value.String
			}
		case asu_watched_class.FieldTerm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field term", values[i])
			} else if value.Valid {
				awc.Term = value.String
			}
		default:
			awc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ASU_Watched_Class.
// This includes values selected through modifiers, order, etc.
func (awc *ASU_Watched_Class) Value(name string) (ent.Value, error) {
	return awc.selectValues.Get(name)
}

// Update returns a builder for updating this ASU_Watched_Class.
// Note that you need to call ASU_Watched_Class.Unwrap() before calling this method if this ASU_Watched_Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (awc *ASU_Watched_Class) Update() *ASUWatchedClassUpdateOne {
	return NewASUWatchedClassClient(awc.config).UpdateOne(awc)
}

// Unwrap unwraps the ASU_Watched_Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (awc *ASU_Watched_Class) Unwrap() *ASU_Watched_Class {
	_tx, ok := awc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ASU_Watched_Class is not a transactional entity")
	}
	awc.config.driver = _tx.drv
	return awc
}

// String implements the fmt.Stringer.
func (awc *ASU_Watched_Class) String() string {
	var builder strings.Builder
	builder.WriteString("ASU_Watched_Class(")
	builder.WriteString(fmt.Sprintf("id=%v, ", awc.ID))
	builder.WriteString("title=")
	builder.WriteString(awc.Title)
	builder.WriteString(", ")
	builder.WriteString("instructor=")
	builder.WriteString(awc.Instructor)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(awc.Subject)
	builder.WriteString(", ")
	builder.WriteString("subject_number=")
	builder.WriteString(awc.SubjectNumber)
	builder.WriteString(", ")
	builder.WriteString("has_open_seats=")
	builder.WriteString(fmt.Sprintf("%v", awc.HasOpenSeats))
	builder.WriteString(", ")
	builder.WriteString("tracked_at=")
	builder.WriteString(awc.TrackedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("class_number=")
	builder.WriteString(awc.ClassNumber)
	builder.WriteString(", ")
	builder.WriteString("term=")
	builder.WriteString(awc.Term)
	builder.WriteByte(')')
	return builder.String()
}

// ASU_Watched_Classes is a parsable slice of ASU_Watched_Class.
type ASU_Watched_Classes []*ASU_Watched_Class
