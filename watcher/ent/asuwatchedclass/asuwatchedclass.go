// Code generated by ent, DO NOT EDIT.

package asuwatchedclass

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the asuwatchedclass type in the database.
	Label = "asu_watched_class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldInstructor holds the string denoting the instructor field in the database.
	FieldInstructor = "instructor"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldSubjectNumber holds the string denoting the subject_number field in the database.
	FieldSubjectNumber = "subject_number"
	// FieldTrackedAt holds the string denoting the tracked_at field in the database.
	FieldTrackedAt = "tracked_at"
	// FieldClassNumber holds the string denoting the class_number field in the database.
	FieldClassNumber = "class_number"
	// FieldTerm holds the string denoting the term field in the database.
	FieldTerm = "term"
	// Table holds the table name of the asuwatchedclass in the database.
	Table = "ASU_Watched_Classes"
)

// Columns holds all SQL columns for asuwatchedclass fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldInstructor,
	FieldSubject,
	FieldSubjectNumber,
	FieldTrackedAt,
	FieldClassNumber,
	FieldTerm,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ASUWatchedClass queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByInstructor orders the results by the instructor field.
func ByInstructor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstructor, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// BySubjectNumber orders the results by the subject_number field.
func BySubjectNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectNumber, opts...).ToFunc()
}

// ByTrackedAt orders the results by the tracked_at field.
func ByTrackedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackedAt, opts...).ToFunc()
}

// ByClassNumber orders the results by the class_number field.
func ByClassNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassNumber, opts...).ToFunc()
}

// ByTerm orders the results by the term field.
func ByTerm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerm, opts...).ToFunc()
}
