// Code generated by ent, DO NOT EDIT.

package asuwatchedclass

import (
	"attendr/watcher/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTitle, v))
}

// Instructor applies equality check predicate on the "instructor" field. It's identical to InstructorEQ.
func Instructor(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldInstructor, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldSubject, v))
}

// SubjectNumber applies equality check predicate on the "subject_number" field. It's identical to SubjectNumberEQ.
func SubjectNumber(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldSubjectNumber, v))
}

// TrackedAt applies equality check predicate on the "tracked_at" field. It's identical to TrackedAtEQ.
func TrackedAt(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTrackedAt, v))
}

// ClassNumber applies equality check predicate on the "class_number" field. It's identical to ClassNumberEQ.
func ClassNumber(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldClassNumber, v))
}

// Term applies equality check predicate on the "term" field. It's identical to TermEQ.
func Term(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTerm, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldUserID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldTitle, v))
}

// InstructorEQ applies the EQ predicate on the "instructor" field.
func InstructorEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldInstructor, v))
}

// InstructorNEQ applies the NEQ predicate on the "instructor" field.
func InstructorNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldInstructor, v))
}

// InstructorIn applies the In predicate on the "instructor" field.
func InstructorIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldInstructor, vs...))
}

// InstructorNotIn applies the NotIn predicate on the "instructor" field.
func InstructorNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldInstructor, vs...))
}

// InstructorGT applies the GT predicate on the "instructor" field.
func InstructorGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldInstructor, v))
}

// InstructorGTE applies the GTE predicate on the "instructor" field.
func InstructorGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldInstructor, v))
}

// InstructorLT applies the LT predicate on the "instructor" field.
func InstructorLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldInstructor, v))
}

// InstructorLTE applies the LTE predicate on the "instructor" field.
func InstructorLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldInstructor, v))
}

// InstructorContains applies the Contains predicate on the "instructor" field.
func InstructorContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldInstructor, v))
}

// InstructorHasPrefix applies the HasPrefix predicate on the "instructor" field.
func InstructorHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldInstructor, v))
}

// InstructorHasSuffix applies the HasSuffix predicate on the "instructor" field.
func InstructorHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldInstructor, v))
}

// InstructorEqualFold applies the EqualFold predicate on the "instructor" field.
func InstructorEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldInstructor, v))
}

// InstructorContainsFold applies the ContainsFold predicate on the "instructor" field.
func InstructorContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldInstructor, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldSubject, v))
}

// SubjectNumberEQ applies the EQ predicate on the "subject_number" field.
func SubjectNumberEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldSubjectNumber, v))
}

// SubjectNumberNEQ applies the NEQ predicate on the "subject_number" field.
func SubjectNumberNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldSubjectNumber, v))
}

// SubjectNumberIn applies the In predicate on the "subject_number" field.
func SubjectNumberIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldSubjectNumber, vs...))
}

// SubjectNumberNotIn applies the NotIn predicate on the "subject_number" field.
func SubjectNumberNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldSubjectNumber, vs...))
}

// SubjectNumberGT applies the GT predicate on the "subject_number" field.
func SubjectNumberGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldSubjectNumber, v))
}

// SubjectNumberGTE applies the GTE predicate on the "subject_number" field.
func SubjectNumberGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldSubjectNumber, v))
}

// SubjectNumberLT applies the LT predicate on the "subject_number" field.
func SubjectNumberLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldSubjectNumber, v))
}

// SubjectNumberLTE applies the LTE predicate on the "subject_number" field.
func SubjectNumberLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldSubjectNumber, v))
}

// SubjectNumberContains applies the Contains predicate on the "subject_number" field.
func SubjectNumberContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldSubjectNumber, v))
}

// SubjectNumberHasPrefix applies the HasPrefix predicate on the "subject_number" field.
func SubjectNumberHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldSubjectNumber, v))
}

// SubjectNumberHasSuffix applies the HasSuffix predicate on the "subject_number" field.
func SubjectNumberHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldSubjectNumber, v))
}

// SubjectNumberEqualFold applies the EqualFold predicate on the "subject_number" field.
func SubjectNumberEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldSubjectNumber, v))
}

// SubjectNumberContainsFold applies the ContainsFold predicate on the "subject_number" field.
func SubjectNumberContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldSubjectNumber, v))
}

// TrackedAtEQ applies the EQ predicate on the "tracked_at" field.
func TrackedAtEQ(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTrackedAt, v))
}

// TrackedAtNEQ applies the NEQ predicate on the "tracked_at" field.
func TrackedAtNEQ(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldTrackedAt, v))
}

// TrackedAtIn applies the In predicate on the "tracked_at" field.
func TrackedAtIn(vs ...time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldTrackedAt, vs...))
}

// TrackedAtNotIn applies the NotIn predicate on the "tracked_at" field.
func TrackedAtNotIn(vs ...time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldTrackedAt, vs...))
}

// TrackedAtGT applies the GT predicate on the "tracked_at" field.
func TrackedAtGT(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldTrackedAt, v))
}

// TrackedAtGTE applies the GTE predicate on the "tracked_at" field.
func TrackedAtGTE(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldTrackedAt, v))
}

// TrackedAtLT applies the LT predicate on the "tracked_at" field.
func TrackedAtLT(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldTrackedAt, v))
}

// TrackedAtLTE applies the LTE predicate on the "tracked_at" field.
func TrackedAtLTE(v time.Time) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldTrackedAt, v))
}

// TrackedAtIsNil applies the IsNil predicate on the "tracked_at" field.
func TrackedAtIsNil() predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIsNull(FieldTrackedAt))
}

// TrackedAtNotNil applies the NotNil predicate on the "tracked_at" field.
func TrackedAtNotNil() predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotNull(FieldTrackedAt))
}

// ClassNumberEQ applies the EQ predicate on the "class_number" field.
func ClassNumberEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldClassNumber, v))
}

// ClassNumberNEQ applies the NEQ predicate on the "class_number" field.
func ClassNumberNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldClassNumber, v))
}

// ClassNumberIn applies the In predicate on the "class_number" field.
func ClassNumberIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldClassNumber, vs...))
}

// ClassNumberNotIn applies the NotIn predicate on the "class_number" field.
func ClassNumberNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldClassNumber, vs...))
}

// ClassNumberGT applies the GT predicate on the "class_number" field.
func ClassNumberGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldClassNumber, v))
}

// ClassNumberGTE applies the GTE predicate on the "class_number" field.
func ClassNumberGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldClassNumber, v))
}

// ClassNumberLT applies the LT predicate on the "class_number" field.
func ClassNumberLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldClassNumber, v))
}

// ClassNumberLTE applies the LTE predicate on the "class_number" field.
func ClassNumberLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldClassNumber, v))
}

// ClassNumberContains applies the Contains predicate on the "class_number" field.
func ClassNumberContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldClassNumber, v))
}

// ClassNumberHasPrefix applies the HasPrefix predicate on the "class_number" field.
func ClassNumberHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldClassNumber, v))
}

// ClassNumberHasSuffix applies the HasSuffix predicate on the "class_number" field.
func ClassNumberHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldClassNumber, v))
}

// ClassNumberEqualFold applies the EqualFold predicate on the "class_number" field.
func ClassNumberEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldClassNumber, v))
}

// ClassNumberContainsFold applies the ContainsFold predicate on the "class_number" field.
func ClassNumberContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldClassNumber, v))
}

// TermEQ applies the EQ predicate on the "term" field.
func TermEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEQ(FieldTerm, v))
}

// TermNEQ applies the NEQ predicate on the "term" field.
func TermNEQ(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNEQ(FieldTerm, v))
}

// TermIn applies the In predicate on the "term" field.
func TermIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldIn(FieldTerm, vs...))
}

// TermNotIn applies the NotIn predicate on the "term" field.
func TermNotIn(vs ...string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldNotIn(FieldTerm, vs...))
}

// TermGT applies the GT predicate on the "term" field.
func TermGT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGT(FieldTerm, v))
}

// TermGTE applies the GTE predicate on the "term" field.
func TermGTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldGTE(FieldTerm, v))
}

// TermLT applies the LT predicate on the "term" field.
func TermLT(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLT(FieldTerm, v))
}

// TermLTE applies the LTE predicate on the "term" field.
func TermLTE(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldLTE(FieldTerm, v))
}

// TermContains applies the Contains predicate on the "term" field.
func TermContains(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContains(FieldTerm, v))
}

// TermHasPrefix applies the HasPrefix predicate on the "term" field.
func TermHasPrefix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasPrefix(FieldTerm, v))
}

// TermHasSuffix applies the HasSuffix predicate on the "term" field.
func TermHasSuffix(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldHasSuffix(FieldTerm, v))
}

// TermEqualFold applies the EqualFold predicate on the "term" field.
func TermEqualFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldEqualFold(FieldTerm, v))
}

// TermContainsFold applies the ContainsFold predicate on the "term" field.
func TermContainsFold(v string) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(sql.FieldContainsFold(FieldTerm, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ASUWatchedClass) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ASUWatchedClass) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ASUWatchedClass) predicate.ASUWatchedClass {
	return predicate.ASUWatchedClass(func(s *sql.Selector) {
		p(s.Not())
	})
}
